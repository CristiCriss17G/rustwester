name: Rust Build

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  APP_NAME: rustwester

jobs:
  lint:
    strategy:
      matrix:
        version:
          - stable
          - 1.75.0

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up system
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y build-essential gcc-multilib clang lld

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.version }}
          targets: x86_64-unknown-linux-gnu
          components: clippy, rustfmt

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.version }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.version }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.version }}-x86_64-unknown-linux-gnu-cargo-build-tests-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.version }}-x86_64-unknown-linux-gnu-cargo-build-tests-

      - name: lint
        run: cargo clippy

  tests:
    strategy:
      matrix:
        version:
          - stable
          - 1.75.0
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: i686-unknown-linux-musl
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: i686-pc-windows-msvc

    runs-on: ${{ matrix.platform.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up system
        if: startsWith(runner.os, 'Linux')
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y build-essential gcc-multilib mingw-w64 clang lld musl musl-tools

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.version }}
          targets: ${{ matrix.platform.target }}
          components: clippy, rustfmt

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.version }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.version }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.version }}-${{ matrix.platform.target }}-cargo-build-tests-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.version }}-${{ matrix.platform.target }}-cargo-build-tests-

      - name: Test
        run: cargo test --locked --target ${{ matrix.platform.target }}

  build:
    if: github.event_name == 'push'
    strategy:
      matrix:
        version:
          - stable
          - 1.75.0
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: i686-unknown-linux-musl
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: i686-pc-windows-msvc

    runs-on: ${{ matrix.platform.os }}
    needs:
      - lint
      - tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up system
        if: startsWith(runner.os, 'Linux')
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y build-essential gcc-multilib mingw-w64 clang lld musl musl-tools

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.version }}
          targets: ${{ matrix.platform.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.version }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.version }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.version }}-${{ matrix.platform.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.version }}-${{ matrix.platform.target }}-cargo-build-

      - name: Build
        run: cargo build --locked --release --target ${{ matrix.platform.target }}

      - name: Rename binary (Linux and macOS)
        if: runner.os != 'Windows'
        run: |
          mv target/${{ matrix.platform.target }}/release/${{ env.APP_NAME }} target/${{ matrix.platform.target }}/release/${{ env.APP_NAME }}-rust${{ matrix.version }}-${{ matrix.platform.target }}

      - name: Rename binary (Windows)
        if: runner.os == 'Windows'
        run: |
          mv -Force target\${{ matrix.platform.target }}\release\${{ env.APP_NAME }}.exe target\${{ matrix.platform.target }}\release\${{ env.APP_NAME }}-rust${{ matrix.version }}-${{ matrix.platform.target }}.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rust-${{ matrix.version }}-${{ matrix.platform.target }}-artifact
          path: target/${{ matrix.platform.target }}/release/
          retention-days: ${{ (github.event_name == 'pull_request' || github.ref != 'refs/heads/main') && 1 || 0 }}

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      attestations: write
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Extract version from Cargo.toml
        id: version
        run: echo "VERSION=$(cat Cargo.toml | grep version | head -1 | awk -F' ' '{print $3}' | sed 's/\"//g')" >> $GITHUB_OUTPUT

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          pattern: "**-artifact"
          path: ./artifacts

      - name: Upload Release
        uses: ncipollo/release-action@v1.14.0
        with:
          artifacts: ./artifacts/*/${{ env.APP_NAME }}-*
          token: ${{ github.token }}
          bodyFile: README.md
          tag: v${{ steps.version.outputs.VERSION }}
          makeLatest: true
          name: ${{ github.event.repository.name }}-v${{ steps.version.outputs.VERSION }}

      - name: Attest build provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: ./artifacts/*/${{ env.APP_NAME }}-*
