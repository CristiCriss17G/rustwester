name: Rust Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  APP_NAME: rustwester

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-musl
          - x86_64-pc-windows-gnu
          - i686-pc-windows-gnu

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up system
        run: sudo apt update && sudo apt upgrade -y && sudo apt install -y build-essential gcc-multilib mingw-w64 clang lld musl musl-tools

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-build-

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Rename binary
        run: |
          if [[ "${{ matrix.target }}" == *"-pc-windows"* ]]; then
          mv target/${{ matrix.target }}/release/${{ env.APP_NAME }}.exe target/${{ matrix.target }}/release/${{ env.APP_NAME }}-${{ matrix.target }}.exe
          else
          mv target/${{ matrix.target }}/release/${{ env.APP_NAME }} target/${{ matrix.target }}/release/${{ env.APP_NAME }}-${{ matrix.target }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-artifact
          path: target/${{ matrix.target }}/release/

  release:
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Extract version from Cargo.toml
        id: version
        run: echo "VERSION=$(cat Cargo.toml | grep version | head -1 | awk -F' ' '{print $3}' | sed 's/\"//g')" >> $GITHUB_OUTPUT

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          pattern: "**-artifact"
          path: ./artifacts

      - name: Upload Release
        uses: ncipollo/release-action@v1.14.0
        with:
          artifacts: ./artifacts/${{ env.APP_NAME }}-*
          token: ${{ github.token }}
          bodyFile: README.md
          tag: ${{ steps.version.outputs.RELEASE_VERSION }}
          makeLatest: true
          name: ${{ github.event.repository.name }}-v${{ steps.version.outputs.RELEASE_VERSION }}
